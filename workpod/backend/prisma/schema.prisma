generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  firstName      String
  lastName       String
  phoneNumber    String? // Make optional with ?
  lastLoginAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  bookings       Booking[]
  passwordResets PasswordReset[]
  passwordHistory PasswordHistory[]
  paymentMethods PaymentMethod[]
  subscriptions  Subscription[]
}

model WorkPod {
  id         String    @id @default(uuid())
  name       String
  status     PodStatus @default(AVAILABLE)
  hourlyRate Decimal
  latitude   Float
  longitude  Float
  address    String
  lockId     String    @unique  // Make unique since one lock per pod
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  bookings   Booking[]
  accessCodes LockAccessCode[]
  lock       Lock      @relation(fields: [lockId], references: [id])
}

enum PodStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  OFFLINE
}

model Booking {
  id          String      @id @default(uuid())
  status      BookingStatus
  userId      String
  workPodId   String      // Changed from podId
  startTime   DateTime
  endTime     DateTime?
  totalAmount Decimal?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  paymentIntentId String? @unique
  paymentProvider PaymentProvider?
  externalPaymentId String?

  user        User        @relation(fields: [userId], references: [id])
  workPod     WorkPod     @relation(fields: [workPodId], references: [id])  // Changed from pod
  accessCodes LockAccessCode[]
  payments    Payment[]

  @@unique([workPodId, startTime, endTime])  // Prevent overlapping bookings
  @@index([userId])
  @@index([workPodId])  // Changed from podId
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum AccessCodeStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

model LockAccessCode {
  id          String    @id @default(uuid())
  code        String
  bookingId   String
  workPodId   String
  validFrom   DateTime
  validUntil  DateTime
  status      AccessCodeStatus @default(ACTIVE)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  booking     Booking   @relation(fields: [bookingId], references: [id])
  workPod     WorkPod   @relation(fields: [workPodId], references: [id])

  @@index([bookingId])
  @@index([workPodId])
}

model Notification {
  id        String             @id @default(uuid())
  userId    String
  type      NotificationType
  data      Json?
  status    NotificationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId])
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
}

model PasswordReset {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model Payment {
  id          String          @id @default(uuid())
  amount      Decimal
  status      String
  provider    PaymentProvider
  externalId  String?
  createdAt   DateTime       @default(now())
  booking     Booking        @relation(fields: [bookingId], references: [id])
  bookingId   String

  @@index([bookingId])
}

model PasswordHistory {
  id        String   @id @default(uuid())
  userId    String
  password  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum NotificationType {
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  PAYMENT_FAILED
  POD_MAINTENANCE
  PAYMENT_SUCCESS
  ACCESS_CODE_GENERATED
}

model Lock {
  id        String   @id @default(uuid())
  deviceId  String   @unique
  name      String?
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  workPod   WorkPod?
}

model PaymentMethod {
  id        String   @id @default(uuid())
  userId    String
  type      String
  brand     String?
  last4     String?
  isDefault Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Subscription {
  id                String   @id @default(uuid())
  userId            String
  planId            String
  status            String
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean  @default(false)
  cancelledAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
